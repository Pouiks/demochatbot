"""
Script de d√©marrage intelligent pour le backend
V√©rifie si les donn√©es existent dans Qdrant et les ing√®re si n√©cessaire
"""

import os
import time
import subprocess
from qdrant_client import QdrantClient
from qdrant_client.http.exceptions import UnexpectedResponse

COLLECTION_NAME = "chunks"
QDRANT_HOST = os.getenv("QDRANT_HOST", "localhost")
QDRANT_PORT = int(os.getenv("QDRANT_PORT", "6333"))

def wait_for_qdrant(max_attempts=60):
    """Attendre que Qdrant soit pr√™t"""
    print("Attente de Qdrant...")
    
    for attempt in range(max_attempts):
        try:
            client = QdrantClient(host=QDRANT_HOST, port=QDRANT_PORT, timeout=5)
            # Tester la connexion avec un timeout court
            client.get_collections()
            print("‚úÖ Qdrant est pr√™t !")
            return client
        except Exception as e:
            if attempt < 10:
                # Premi√®res tentatives : attendre 1 seconde
                print(f"‚è≥ Tentative {attempt + 1}/{max_attempts}...")
                time.sleep(1)
            else:
                # Tentatives suivantes : attendre 2 secondes
                print(f"‚è≥ Tentative {attempt + 1}/{max_attempts}... ({str(e)[:50]})")
                time.sleep(2)
    
    raise Exception("‚ùå Impossible de se connecter √† Qdrant apr√®s 2 minutes")

def collection_exists(client):
    """V√©rifier si la collection existe et contient des donn√©es"""
    try:
        collection_info = client.get_collection(COLLECTION_NAME)
        points_count = collection_info.points_count
        print(f"üìä Collection '{COLLECTION_NAME}' trouv√©e avec {points_count} points")
        return points_count > 0
    except UnexpectedResponse:
        print(f"‚ùå Collection '{COLLECTION_NAME}' n'existe pas")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de la v√©rification: {e}")
        return False

def ingest_data():
    """Ing√©rer les donn√©es initiales"""
    print("\nüì• Ingestion des donn√©es initiales...")
    
    # Ing√©rer les documents
    print("\n1Ô∏è‚É£ Ingestion des documents...")
    try:
        result = subprocess.run(
            ["python", "ingest_qdrant.py"],
            capture_output=True,
            text=True,
            timeout=60  # Timeout de 60 secondes
        )
        
        if result.returncode == 0:
            print("‚úÖ Documents ing√©r√©s avec succ√®s")
            if result.stdout.strip():
                print(result.stdout)
        else:
            print("‚ö†Ô∏è Erreur lors de l'ingestion des documents:")
            print(result.stderr)
    except subprocess.TimeoutExpired:
        print("‚ö†Ô∏è Timeout lors de l'ingestion des documents")
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur inattendue: {e}")
    
    # Ing√©rer les appartements
    print("\n2Ô∏è‚É£ Ingestion des appartements...")
    try:
        result = subprocess.run(
            ["python", "ingest_apartments.py"],
            capture_output=True,
            text=True,
            timeout=60  # Timeout de 60 secondes
        )
        
        if result.returncode == 0:
            print("‚úÖ Appartements ing√©r√©s avec succ√®s")
            if result.stdout.strip():
                print(result.stdout)
        else:
            print("‚ö†Ô∏è Erreur lors de l'ingestion des appartements:")
            print(result.stderr)
    except subprocess.TimeoutExpired:
        print("‚ö†Ô∏è Timeout lors de l'ingestion des appartements")
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur inattendue: {e}")

def main():
    print("=" * 50)
    print("üöÄ D√©marrage du backend ECLA AI Search")
    print("=" * 50)
    
    # Attendre que Qdrant soit pr√™t
    client = wait_for_qdrant()
    
    # V√©rifier si les donn√©es existent
    if collection_exists(client):
        print("\n‚úÖ Les donn√©es sont d√©j√† pr√©sentes dans Qdrant")
        print("üöÄ D√©marrage du serveur...")
    else:
        print("\n‚ö†Ô∏è Aucune donn√©e trouv√©e dans Qdrant")
        ingest_data()
        print("\n‚úÖ Ingestion termin√©e !")
        print("üöÄ D√©marrage du serveur...\n")
    
    # D√©marrer Uvicorn
    os.execvp("uvicorn", ["uvicorn", "search_server:app", "--host", "0.0.0.0", "--port", "8000"])

if __name__ == "__main__":
    main()

